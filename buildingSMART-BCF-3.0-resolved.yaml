---
openapi: 3.0.2
info:
  title: BCF API
  version: "3.0.0"
servers:
  - description: local server
    url: http://localhost:8080
- url: /
paths:
  /bcf/{version}/projects:
    get:
      tags:
      - Project
      summary: Get Projects
      description: Retrieve a collection of projects where the currently logged on user has access to.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projects'
              example:
              - project_id: F445F4F2-4D02-4B2A-B612-5E456BEF9137
                name: Example project 1
                authorization:
                  project_actions:
                  - createTopic
                  - createDocument
              - project_id: A233FBB2-3A3B-EFF4-C123-DE22ABC8414
                name: Example project 2
                authorization:
                  project_actions: []
  /bcf/{version}/projects/{project_id}:
    get:
      tags:
      - Project
      summary: Get Project
      description: Retrieve a specific project.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project_GET'
              example:
                project_id: B724AAC3-5B2A-234A-D143-AE33CC18414
                name: Example project 3
                authorization:
                  project_actions:
                  - update
    put:
      tags:
      - Project
      summary: Update Project
      description: "Modify a specific project. This operation is only possible when the server returns the update flag in the Project authorization, see section 3.1.5"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_PUT'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project_GET'
              example:
                project_id: B724AAC3-5B2A-234A-D143-AE33CC18414
                name: Example project 3 - Second Section
                authorization:
                  project_actions:
                  - update
  /bcf/{version}/projects/{project_id}/extensions:
    get:
      tags:
      - Project
      summary: Get Project Extensions
      description: |
        Retrieve a specific projects extensions. Project extensions are used to define possible values that can be used in topics and comments, for example topic labels and priorities.
        They may change during the course of a project. The most recent extensions state which values are valid at a given moment for newly created topics and comments.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extensions_GET'
              example:
                topic_type:
                - Information
                - Error
                topic_status:
                - Open
                - Closed
                - ReOpened
                topic_label:
                - Architecture
                - Structural
                - MEP
                snippet_type:
                - .ifc
                - .csv
                priority:
                - Low
                - Medium
                - High
                users:
                - Architect@example.com
                - BIM-Manager@example.com
                - bob_heater@example.com
                stage:
                - Preliminary Planning End
                - Construction Start
                - Construction End
                project_actions:
                - update
                - createTopic
                - createDocument
                topic_actions:
                - update
                - updateBimSnippet
                - updateRelatedTopics
                - updateDocumentReferences
                - updateFiles
                - createComment
                - createViewpoint
                comment_actions:
                - update
  /bcf/{version}/projects/{project_id}/topics:
    get:
      tags:
      - Topics
      summary: Get Topics
      description: Retrieve a collection of topics related to a project (default sort order is creation_date).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $filter
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|type|description|
          |---------|----|-----------|
          |creation_author|string|userId of the creation author (value from extensions)|
          |modified_author|string|userId of the modified author (value from extensions)|
          |assigned_to|string|userId of the assigned person (value from extensions)|
          |stage|string|stage this topic is part of (value from extensions)|
          |topic_status|string|status of a topic (value from extensions)|
          |topic_type|string|type of a topic (value from extensions)|
          |creation_date|datetime|creation date of a topic|
          |modified_date|datetime|modification date of a topic|
          |labels|array (string)|labels of a topic (value from extensions)|
          |priority|string|priority of a topic (value from extensions)|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: assigned_to eq 'Architect@example.com' and topic_status eq 'Open' and creation_date gt 2015-12-05T00:00:00+01:00
      - name: $orderby
        in: query
        description: "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|creation_date|creation date of a topic|\n|modified_date|modification date of a topic|\n|server_assigned_id|the server_assigned_id of the topic|\n|index|index of a topic|   \n"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: modified_date desc
      - name: $top
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $skip
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/topic_GET'
              example:
              - guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                server_assigned_id: ISSUE-00001
                creation_author: Architect@example.com
                title: Example topic 1
                labels:
                - Architecture
                - Structural
                creation_date: 2013-10-21T17:34:22.409Z
              - guid: A211FCC2-3A3B-EAA4-C321-DE22ABC8414
                server_assigned_id: ISSUE-00078
                creation_author: Architect@example.com
                title: Example topic 2
                labels:
                - Architecture
                - Heating
                - Electrical
                creation_date: 2014-11-19T14:24:11.316Z
    post:
      tags:
      - Topics
      summary: Create Topic
      description: "Add a new topic. This operation is only possible when the server returns the createTopic flag in the Project authorization, see section 3.1.5"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic_POST'
            example:
              topic_type: Clash
              topic_status: open
              title: Example topic 3
              priority: high
              labels:
              - Architecture
              - Heating
              assigned_to: harry.muster@example.com
              bim_snippet:
                snippet_type: clash
                is_external: true
                reference: https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB
                reference_schema: https://example.com/bcf/1.0/clash.xsd
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic_GET'
              example:
                guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                server_assigned_id: ISSUE-01462
                creation_author: Architect@example.com
                creation_date: 2016-08-01T17:34:22.409Z
                topic_type: Clash
                topic_status: open
                title: Example topic 3
                priority: high
                labels:
                - Architecture
                - Heating
                assigned_to: harry.muster@example.com
                bim_snippet:
                  snippet_type: clash
                  is_external: true
                  reference: https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB
                  reference_schema: https://example.com/bcf/1.0/clash.xsd
  /bcf/{version}/projects/{project_id}/topics/{topic_id}:
    get:
      tags:
      - Topics
      summary: Get Topic
      description: Retrieve a specific topic.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic_GET'
              example:
                guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
                server_assigned_id: ISSUE-00549
                creation_author: Architect@example.com
                creation_date: 2016-08-01T17:34:22.409Z
                topic_type: Clash
                topic_status: open
                title: Example topic 3
                priority: high
                labels:
                - Architecture
                - Heating
                assigned_to: harry.muster@example.com
                bim_snippet:
                  snippet_type: clash
                  is_external: true
                  reference: https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB
                  reference_schema: https://example.com/bcf/1.0/clash.xsd
                authorization:
                  topic_actions:
                  - createComment
                  - createViewpoint
    put:
      tags:
      - Topics
      summary: Update Topic
      description: |
        Modify a specific topic, description similar to POST. This operation is only possible when the server returns
        the update flag in the Topic authorization, see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic_PUT'
            example:
              topic_type: Clash
              topic_status: open
              title: Example topic 3 - Changed Title
              priority: high
              labels:
              - Architecture
              - Heating
              assigned_to: harry.muster@example.com
              bim_snippet:
                snippet_type: clash
                is_external: true
                reference: https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB
                reference_schema: https://example.com/bcf/1.0/clash.xsd
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic_GET'
              example:
                guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
                server_assigned_id: ISSUE-00037
                creation_author: Architect@example.com
                creation_date: 2016-08-01T17:34:22.409Z
                modified_author: Architect@example.com
                modified_date: 2016-08-02T13:22:22.409Z
                topic_type: Clash
                topic_status: open
                title: Example topic 3 - Changed Title
                priority: high
                labels:
                - Architecture
                - Heating
                assigned_to: harry.muster@example.com
                bim_snippet:
                  snippet_type: clash
                  is_external: true
                  reference: https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB
                  reference_schema: https://example.com/bcf/1.0/clash.xsd
    delete:
      tags:
      - Topics
      summary: Delete Topic
      description: "Deletes a single topic. This operation is only possible when the server returns the delete flag in the Topic authorization, see section 3.2.8"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/snippet:
    get:
      tags:
      - Snippets
      summary: Get Snippet
      description: Retrieves a topics BIM-Snippet as binary file.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Snippets
      summary: Update Snippet
      description: |
        Puts a new BIM Snippet binary file to a topic. If this is used, the parent topics BIM Snippet property is_external must
        be set to false and the reference must be the file name with extension. This operation is only possible when the server returns the updateBimSnippet
        flag in the Topic authorization, see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
  /bcf/{version}/projects/{project_id}/files_information:
    get:
      tags:
      - Files
      summary: Get Files Information
      description: |
        Retrieve a collection of project_file_informations to support allowing users to choose which Files (models)
        to reference in the header of topics created on the server.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project_files_information_GET'
              example:
              - display_information:
                - field_display_name: Model Name
                  field_value: ARCH-Z100-051
                - field_display_name: Revision Date
                  field_value: May 3 2020
                file:
                  ifc_project: 0J$yPqHBD12v72y4qF6XcD
                  file_name: OfficeBuilding_Architecture_0001.ifc
                  reference: https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc
              - display_information:
                - field_display_name: Model Name
                  field_value: MEP-Z100-015
                - field_display_name: Revision Date
                  field_value: Apr 30 2020
                file:
                  ifc_project: 3hwBHP91jBRwPsmyf$3Hea
                  file_name: OfficeBuilding_Heating_0003.ifc
                  reference: cf37bae6-0900-46be-b37f-b34754fe0b4a
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/files:
    get:
      tags:
      - Files
      summary: Get Files
      description: "Retrieve a collection of file references as topic header. \nImplementer Note: The reference property can either be an Uri or a server specific id.\nUris are given as absolute paths to the model files while ids reference a custom id of the model file and require custom logic per server to retrieve it.\nThis allows referencing of files on the server but requires clients to know how to retrieve files in a specific implementation.\n"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/file_GET'
              example:
              - ifc_project: 0J$yPqHBD12v72y4qF6XcD
                file_name: OfficeBuilding_Architecture_0001.ifc
                reference: https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc
              - ifc_project: 3hwBHP91jBRwPsmyf$3Hea
                file_name: OfficeBuilding_Heating_0003.ifc
                reference: cf37bae6-0900-46be-b37f-b34754fe0b4a
    put:
      tags:
      - Files
      summary: Update File
      description: |
        Update a collection of file references on the topic header. This operation is only possible when the server returns the updateFiles flag in the Topic authorization,
        see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/file_PUT'
            example:
            - ifc_project: 0J$yPqHBD12v72y4qF6XcD
              filename: OfficeBuilding_Architecture_0001.ifc
              reference: https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc
            - ifc_project: 3hwBHP91jBRwPsmyf$3Hea
              filename: OfficeBuilding_Heating_0003.ifc
              reference: https://example.com/files/3hwBHP91jBRwPsmyf$3Hea_0003.ifc
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/file_GET'
              example:
              - ifc_project: 0J$yPqHBD12v72y4qF6XcD
                file_name: OfficeBuilding_Architecture_0001.ifc
                reference: https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc
              - ifc_project: 3hwBHP91jBRwPsmyf$3Hea
                file_name: OfficeBuilding_Heating_0003.ifc
                reference: https://example.com/files/3hwBHP91jBRwPsmyf$3Hea_0003.ifc
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/comments:
    get:
      tags:
      - Comments
      summary: Get Comments
      description: Retrieve a collection of all comments related to a topic (default ordering is date).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $filter
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|type|description|
          |---------|----|-----------|
          |author|string|userId of the author (value from extensions)|
          |date|datetime|creation date of a comment|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: assigned_to eq 'Architect@example.com' and topic_status eq 'Open' and creation_date gt 2015-12-05T00:00:00+01:00
      - name: $orderby
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|description|
          |---------|-----------|
          |date|creation date of a comment|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: modified_date desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment_GET'
              example:
              - guid: C4215F4D-AC45-A43A-D615-AA456BEF832B
                date: 2016-08-01T12:34:22.409Z
                author: max.muster@example.com
                comment: Clash found
                topic_guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
                authorization:
                  comment_actions:
                  - update
              - guid: A333FCA8-1A31-CAAC-A321-BB33ABC8414
                date: 2016-08-01T14:24:11.316Z
                author: bob.heater@example.com
                comment: will rework the heating model
                topic_guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
    post:
      tags:
      - Comments
      summary: Create Comment
      description: "Add a new comment to a topic. This operation is only possible when the server returns the createComment flag in the Topic authorization, see section 3.2.8"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment_POST'
            example:
              comment: will rework the heating model
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment_GET'
              example:
                guid: A333FCA8-1A31-CAAC-A321-BB33ABC8414
                date: 2016-08-01T14:24:11.316Z
                author: bob.heater@example.com
                comment: will rework the heating model
                topic_guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/comments/{comment_id}:
    get:
      tags:
      - Comments
      summary: Get Comment
      description: Get a single comment.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment_GET'
              example:
                guid: A333FCA8-1A31-CAAC-A321-BB33ABC8414
                date: 2016-08-01T14:24:11.316Z
                author: bob.heater@example.com
                comment: will rework the heating model
                topic_guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
    put:
      tags:
      - Comments
      summary: Update Comment
      description: |
        Update a single comment, description similar to POST. This operation is only possible when the server returns the update
        flag in the Comment authorization, see section 3.4.6
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment_PUT'
            example:
              comment: will rework the heating model and fix the ventilation
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment_GET'
              example:
                guid: A333FCA8-1A31-CAAC-A321-BB33ABC8414
                date: 2016-08-01T14:24:11.316Z
                author: bob.heater@example.com
                comment: will rework the heating model
                topic_guid: B345F4F2-3A04-B43B-A713-5E456BEF8228
    delete:
      tags:
      - Comments
      summary: Delete Comment
      description: "Deletes a single comment. This operation is only possible when the server returns the delete flag in the Comment authorization, see section 3.4.6"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints:
    get:
      tags:
      - Viewpoints
      summary: Get Viewpoints
      description: Retrieve a collection of all viewpoints related to a topic.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/viewpoint_GET'
              example:
              - guid: b24a82e9-f67b-43b8-bda0-4946abf39624
                perspective_camera:
                  camera_view_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                  camera_direction:
                    x: 1.0
                    "y": 1.0
                    z: 2.0
                  camera_up_vector:
                    x: 0.0
                    "y": 0.0
                    z: 1.0
                  field_of_view: 90.0
                  aspect_ratio: 1.33
                lines:
                - start_point:
                    x: 2.0
                    "y": 1.0
                    z: 1.0
                  end_point:
                    x: 0.0
                    "y": 1.0
                    z: 0.7
                clipping_planes:
                - location:
                    x: 0.7
                    "y": 0.3
                    z: -0.2
                  direction:
                    x: 1.0
                    "y": 0.4
                    z: 0.1
              - guid: a11a82e7-e66c-34b4-ada1-5846abf39133
                perspective_camera:
                  camera_view_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                  camera_direction:
                    x: 1.0
                    "y": 1.0
                    z: 2.0
                  camera_up_vector:
                    x: 0.0
                    "y": 0.0
                    z: 1.0
                  field_of_view: 90.0
                  aspect_ratio: 1.33
                lines:
                - start_point:
                    x: 1.0
                    "y": 1.0
                    z: 1.0
                  end_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                clipping_planes:
                - location:
                    x: 0.5
                    "y": 0.5
                    z: 0.5
                  direction:
                    x: 1.0
                    "y": 0.0
                    z: 0.0
    post:
      tags:
      - Viewpoints
      summary: Create Viewpoint
      description: |
        Add a new viewpoint. Viewpoints are immutable, meaning that they should never change. Requirements for different visualizations should be handled by
        creating new viewpoint elements. This operation is only possible when the server returns the createViewpoint flag in the Topic authorization, see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewpoint_POST'
            example:
              index: 10
              perspective_camera:
                camera_view_point:
                  x: 0.0
                  "y": 0.0
                  z: 0.0
                camera_direction:
                  x: 1.0
                  "y": 1.0
                  z: 2.0
                camera_up_vector:
                  x: 0.0
                  "y": 0.0
                  z: 1.0
                field_of_view: 90.0
                aspect_ratio: 1.33
              lines:
              - start_point:
                  x: 1.0
                  "y": 1.0
                  z: 1.0
                end_point:
                  x: 0.0
                  "y": 0.0
                  z: 0.0
              clipping_planes:
              - location:
                  x: 0.5
                  "y": 0.5
                  z: 0.5
                direction:
                  x: 1.0
                  "y": 0.0
                  z: 0.0
              bitmaps:
              - bitmap_type: jpg
                bitmap_data: SGVsbG8gV29ybGQh
                location:
                  x: 10.0
                  "y": -10.0
                  z: 7.0
                normal:
                  x: -1.0
                  "y": 1.25
                  z: 0.0
                up:
                  x: -5.4
                  "y": -4.3
                  z: 1.0
                height: 1666
              snapshot:
                snapshot_type: png
                snapshot_data: SGVsbG8gV29ybGQh
              components:
                selection:
                - ifc_guid: 2MF28NhmDBiRVyFakgdbCT
                  originating_system: Example CAD Application
                  authoring_tool_id: EXCAD/v1.0
                coloring:
                - color: ff0000
                  components:
                  - ifc_guid: 3$cshxZO9AJBebsni$z9Yk
                visibility:
                  default_visibility: false
                  exceptions:
                  - ifc_guid: 4$cshxZO9AJBebsni$z9Yk
                  view_setup_hints:
                    spaces_visible: true
                    space_boundaries_visible: false
                    openings_visible: true
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewpoint_GET'
              example:
                guid: a11a82e7-e66c-34b4-ada1-5846abf39133
                index: 10
                perspective_camera:
                  camera_view_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                  camera_direction:
                    x: 1.0
                    "y": 1.0
                    z: 2.0
                  camera_up_vector:
                    x: 0.0
                    "y": 0.0
                    z: 1.0
                  field_of_view: 90.0
                  aspect_ratio: 1.33
                lines:
                - start_point:
                    x: 1.0
                    "y": 1.0
                    z: 1.0
                  end_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                clipping_planes:
                - location:
                    x: 0.5
                    "y": 0.5
                    z: 0.5
                  direction:
                    x: 1.0
                    "y": 0.0
                    z: 0.0
                bitmaps:
                - guid: 20c1cb56-315f-4a0a-922d-ed7a4a8edf55
                  bitmap_type: jpg
                  location:
                    x: 10.0
                    "y": -10.0
                    z: 7.0
                  normal:
                    x: -1.0
                    "y": 1.25
                    z: 0.0
                  up:
                    x: -5.4
                    "y": -4.3
                    z: 1.0
                  height: 1666
                snapshot:
                  snapshot_type: png
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}:
    get:
      tags:
      - Viewpoints
      summary: Get Viewpoint
      description: Retrieve a specific viewpoint.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewpoint_GET'
              example:
                guid: a11a82e7-e66c-34b4-ada1-5846abf39133
                index: 10
                perspective_camera:
                  camera_view_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                  camera_direction:
                    x: 1.0
                    "y": 1.0
                    z: 2.0
                  camera_up_vector:
                    x: 0.0
                    "y": 0.0
                    z: 1.0
                  field_of_view: 90.0
                  aspect_ratio: 1.33
                lines:
                - start_point:
                    x: 1.0
                    "y": 1.0
                    z: 1.0
                  end_point:
                    x: 0.0
                    "y": 0.0
                    z: 0.0
                clipping_planes:
                - location:
                    x: 0.5
                    "y": 0.5
                    z: 0.5
                  direction:
                    x: 1.0
                    "y": 0.0
                    z: 0.0
                bitmaps:
                - guid: 20c1cb56-315f-4a0a-922d-ed7a4a8edf55
                  bitmap_type: jpg
                  location:
                    x: 10.0
                    "y": -10.0
                    z: 7.0
                  normal:
                    x: -1.0
                    "y": 1.25
                    z: 0.0
                  up:
                    x: -5.4
                    "y": -4.3
                    z: 1.0
                  height: 1666
                snapshot:
                  snapshot_type: png
    delete:
      tags:
      - Viewpoints
      summary: Delete Viewpoint
      description: "Deletes a single viewpoint. This operation is only possible when the server returns the delete flag in the Viewpoint authorization, see section 3.5.10"
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/snapshot:
    get:
      tags:
      - Viewpoints
      summary: Get Snapshot
      description: Retrieve a viewpoints snapshot (png or jpg) as image file. A viewpoint contains a snapshot if viewpoint.snapshot != null.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/bitmaps/{bitmap_id}:
    get:
      tags:
      - Viewpoints
      summary: Get Bitmap
      description: Retrieve a specific viewpoints bitmap image file (png or jpg).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bitmap_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/selection:
    get:
      tags:
      - Viewpoints
      summary: Get Selection
      description: Retrieve a collection of all selected components in a viewpoint.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/selection_GET'
              example:
                selection:
                - ifc_guid: 2MF28NhmDBiRVyFakgdbCT
                  originating_system: Example CAD Application
                  authoring_tool_id: EXCAD/v1.0
                - ifc_guid: 3$cshxZO9AJBebsni$z9Yk
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/coloring:
    get:
      tags:
      - Viewpoints
      summary: Get Coloring
      description: Retrieve a collection of all colored components in a viewpoint.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coloring_GET'
              example:
                coloring:
                - color: '#ff0000'
                  components:
                  - ifc_guid: 2MF28NhmDBiRVyFakgdbCT
                    originating_system: Example CAD Application
                    authoring_tool_id: EXCAD/v1.0
                  - ifc_guid: 3$cshxZO9AJBebsni$z9Yk
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/visibility:
    get:
      tags:
      - Viewpoints
      summary: Get Visibility
      description: Retrieve visibility of components in a viewpoint.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: viewpoint_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/visibility_GET'
              example:
                visibility:
                  default_visibility: true
                  exceptions:
                  - ifc_guid: 2MF28NhmDBiRVyFakgdbCT
                    originating_system: Example CAD Application
                    authoring_tool_id: EXCAD/v1.0
                  - ifc_guid: 3$cshxZO9AJBebsni$z9Yk
                  view_setup_hints:
                    spaces_visible: true
                    space_boundaries_visible: false
                    openings_visible: true
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/related_topics:
    get:
      tags:
      - Related Topics
      summary: Get Related Topics
      description: Retrieve a collection of all related topics to a topic.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/related_topic_GET'
              example:
              - related_topic_guid: db49df2b-0e42-473b-a3ee-f7b785d783c4
              - related_topic_guid: 6963a846-54d1-4050-954d-607cd5e48aa3
    put:
      tags:
      - Related Topics
      summary: Update Related Topics
      description: |
        Add or update a collection of all related topics to a topic. This operation is only possible when the server returns the updateRelatedTopics
        flag in the Topic authorization, see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              example:
              - related_topic_guid: db49df2b-0e42-473b-a3ee-f7b785d783c4
              - related_topic_guid: 6963a846-54d1-4050-954d-607cd5e48aa3
              - related_topic_guid: bac66ab4-331e-4f21-a28e-083d2cf2e796
              items:
                $ref: '#/components/schemas/related_topic_PUT'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/related_topic_GET'
              example:
              - related_topic_guid: db49df2b-0e42-473b-a3ee-f7b785d783c4
              - related_topic_guid: 6963a846-54d1-4050-954d-607cd5e48aa3
              - related_topic_guid: bac66ab4-331e-4f21-a28e-083d2cf2e796
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/document_references:
    get:
      tags:
      - Document References
      summary: Get Document References
      description: |
        Add a document reference to a topic. This operation is only possible when the server returns the updateDocumentReferences
        flag in the Topic authorization, see section 3.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/document_reference_GET'
              example:
              - guid: 212ab37a-6122-448e-86fc-86503183b520
                url: http://example.com/files/LegalRequirements.pdf
                description: The legal requirements for buildings.
              - guid: 6cbfe31d-95c3-4f4d-92a6-420c23698721
                document_guid: 472ab37a-6122-448e-86fc-86503183b520
                description: The building owners global design parameters for buildings.
    post:
      tags:
      - Document References
      summary: Create Document Reference
      description: |
        Add a document reference to a topic. This operation is only possible when the server returns the updateDocumentReferences flag in the Topic authorization, see section 4.2.8

        Should either reference an internal or an external document.

        Internal
        document_guid must match an existing document in the project
        url must be null
        External
        document_guid must be null
        url must be the url to the external resource
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document_reference_POST'
            example:
              url: http://example.com/files/LegalRequirements.pdf
              description: The legal requirements for buildings.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document_reference_GET'
              example:
                guid: 275ab37a-6122-448e-86fc-86503183b520
                url: http://example.com/files/LegalRequirements.pdf
                description: The legal requirements for buildings.
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/document_references/{document_reference_id}:
    put:
      tags:
      - Document References
      summary: Update Document Reference
      description: |
        Update an existing document reference identified by guid. Uses the same rules as POST Document Reference Service.
        This operation is only possible when the server returns the updateDocumentReferences flag in the Topic authorization, see section 4.2.8
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: document_reference_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document_reference_PUT'
            example:
              url: http://example.com/files/LegalRequirements_Update.pdf
              description: The legal requirements for buildings.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document_reference_GET'
              example:
                guid: 135ab37a-6122-448e-86fc-86503183b520
                url: http://example.com/files/LegalRequirements_Update.pdf
                description: The legal requirements for buildings.
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/documents:
    get:
      tags:
      - Documents
      summary: Get Documents
      description: |
        Retrieve a collection of all documents uploaded to a project.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/document_GET'
              example:
              - guid: 472ab37a-6122-448e-86fc-86503183b520
                filename: LegalRequirements.pdf
              - guid: 6cbfe31d-95c3-4f4d-92a6-420c23698721
                filename: DesignParameters.pdf
    post:
      tags:
      - Documents
      summary: Create Document
      description: |
        Upload a document (binary file) to a project. This operation is only possible when the server returns the createDocument
        flag in the Project authorization, see section 4.1.5
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document_GET'
              example:
                guid: 472ab37a-6122-448e-86fc-86503183b520
                filename: Official_Building_Permission.pdf
  /bcf/{version}/projects/{project_id}/documents/{document_id}:
    get:
      tags:
      - Documents
      summary: Get Document
      description: |
        Retrieves a document as binary file.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /bcf/{version}/projects/{project_id}/topics/events:
    get:
      tags:
      - Events
      summary: Get Topics Events
      description: |
        Retrieves a document as binary file.
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $top
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $skip
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $filter
        in: query
        description: "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|topic_guid|string|guid of the topic |\n|author|string|userId of the author (value from extensions)|\n|type|string|type of the event (value from Topic event types, table above)|\n|date|datetime|date of the event|    \n"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: author eq 'Architect@example.com' and type eq 'status_updated' and date gt 2015-12-05T00:00:00+01:00&
      - name: $orderby
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|description|
          |---------|-----------|
          |date|date of the event|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: date asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/topic_event_GET'
              example:
              - topic_guid: A211FCC2-3A3B-EAA4-C321-DE22ABC8414
                date: 2014-11-19T14:24:11.316Z
                author: Architect@example.com
                events:
                - type: status_updated
                  value: Closed
              - topic_guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                date: 2013-10-21T17:34:22.409Z
                author: Architect@example.com
                events:
                - type: type_updated
                  value: Warning
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/events:
    get:
      tags:
      - Events
      summary: Get Topic Events
      description: |
        Retrieve a collection of topic events related to a project (default sort order is date).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $top
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $skip
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $filter
        in: query
        description: "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|author|string|userId of the author (value from extensions)|\n|type|string|type of the event (value from Topic event types, table above)|\n|date|datetime|date of the event|    \n"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: author eq 'Architect@example.com' and type eq 'status_updated' and date gt 2015-12-05T00:00:00+01:00&
      - name: $orderby
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|description|
          |---------|-----------|
          |date|date of the event|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: date asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/topic_event_GET'
              example:
              - topic_guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                date: 2014-11-19T14:24:11.316Z
                author: Architect@example.com
                events:
                - type: type_updated
                  value: Error
              - topic_guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                date: 2013-10-21T17:34:22.409Z
                author: Architect@example.com
                events:
                - type: status_updated
                  value: Open
  /bcf/{version}/projects/{project_id}/topics/comments/events:
    get:
      tags:
      - Events
      summary: Get Comments Events
      description: |
        Retrieve a collection of comment events related to a project (default sort order is date).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $top
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $skip
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $filter
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|type|description|
          |---------|----|-----------|
          |comment_guid|string|guid of the comment |
          |topic_guid|string|guid of the topic |
          |author|string|userId of the author (value from extensions)|
          |date|datetime|date of the event|
          |type|string|type of the event (value from Comment event types, table above)|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: author eq 'Architect@example.com' and date gt 2015-12-05T00:00:00+01:00 and type eq 'comment_created'
      - name: $orderby
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|description|
          |---------|-----------|
          |date|date of the event|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: date asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment_event_GET'
              example:
              - comment_guid: C4215F4D-AC45-A43A-D615-AA456BEF832B
                topic_guid: A211FCC2-3A3B-EAA4-C321-DE22ABC8414
                date: 2014-11-19T14:24:11.316Z
                author: Architect@example.com
                events:
                - type: comment_created
              - comment_guid: C4215F4D-AC45-A43A-D615-AA456BEF832B
                topic_guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                date: 2013-10-21T17:34:22.409Z
                author: Architect@example.com
                events:
                - type: viewpoint_updated
                  value: b24a82e9-f67b-43b8-bda0-4946abf39624
  /bcf/{version}/projects/{project_id}/topics/{topic_id}/comments/{comment_id}/events:
    get:
      tags:
      - Events
      summary: Get Comment Event
      description: |
        Retrieve a collection of comment events related to a comment (default sort order is date).
      parameters:
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: "3.0"
      - name: project_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: $top
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $skip
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: $filter
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|type|description|
          |---------|----|-----------|
          |author|string|userId of the author (value from extensions)|
          |date|datetime|date of the event|
          |type|string|type of the event (value from Comment event types, table above)|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: author eq 'Architect@example.com' and date gt 2015-12-05T00:00:00+01:00 and type eq 'comment_created'
      - name: $orderby
        in: query
        description: |
          Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)

          |parameter|description|
          |---------|-----------|
          |date|date of the event|
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: date asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment_event_GET'
              example:
              - comment_guid: C4215F4D-AC45-A43A-D615-AA456BEF832B
                topic_guid: A211FCC2-3A3B-EAA4-C321-DE22ABC8414
                date: 2014-11-19T14:24:11.316Z
                author: Architect@example.com
                events:
                - type: comment_created
              - comment_guid: C4215F4D-AC45-A43A-D615-AA456BEF832B
                topic_guid: A245F4F2-2C01-B43B-B612-5E456BEF8116
                date: 2013-10-21T17:34:22.409Z
                author: Architect@example.com
                events:
                - type: comment_text_updated
                  value: This is the updated comment
components:
  schemas:
    error:
      required:
      - message
      type: object
      properties:
        message:
          type: string
      description: "Schema for error, BCF REST API."
    extensions_GET:
      required:
      - priority
      - snippet_type
      - stage
      - topic_label
      - topic_status
      - topic_type
      - users
      type: object
      properties:
        topic_type:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        topic_status:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        topic_label:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        snippet_type:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        priority:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        users:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        stage:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        project_actions:
          $ref: '#/components/schemas/project_actions'
        topic_actions:
          $ref: '#/components/schemas/topic_actions'
        comment_actions:
          $ref: '#/components/schemas/comment_actions'
    project_GET:
      required:
      - name
      - project_id
      type: object
      properties:
        project_id:
          type: string
        name:
          type: string
        authorization:
          $ref: '#/components/schemas/project_GET_authorization'
      description: "Schema for single project GET, BCF REST API."
    project_PUT:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: "Schema for project PUT, BCF REST API."
    projects:
      type: array
      items:
        $ref: '#/components/schemas/project_GET'
    project_actions:
      type: array
      items:
        type: string
        enum:
        - update
        - createTopic
        - createDocument
    topic_actions:
      type: array
      items:
        type: string
        enum:
        - update
        - updateBimSnippet
        - updateRelatedTopics
        - updateDocumentReferences
        - updateFiles
        - createComment
        - createViewpoint
        - delete
    comment_actions:
      type: array
      items:
        type: string
        enum:
        - update
        - delete
    viewpoint_actions:
      type: array
      items:
        type: string
        enum:
        - delete
    event_action:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          nullable: true
      nullable: true
    comment_GET:
      required:
      - author
      - comment
      - date
      - guid
      - topic_guid
      type: object
      properties:
        guid:
          type: string
        date:
          type: string
        author:
          type: string
        comment:
          type: string
        topic_guid:
          type: string
        viewpoint_guid:
          type: string
          nullable: true
        reply_to_comment_guid:
          type: string
          nullable: true
        modified_date:
          type: string
          nullable: true
        modified_author:
          type: string
          nullable: true
        authorization:
          $ref: '#/components/schemas/comment_GET_authorization'
    comment_POST:
      required:
      - comment
      type: object
      properties:
        comment:
          type: string
        viewpoint_guid:
          type: string
          nullable: true
        reply_to_comment_guid:
          type: string
          nullable: true
    comment_PUT:
      required:
      - comment
      type: object
      properties:
        comment:
          type: string
        viewpoint_guid:
          type: string
          nullable: true
    document_GET:
      required:
      - filename
      - guid
      type: object
      properties:
        guid:
          type: string
        filename:
          type: string
    document_reference_GET:
      required:
      - guid
      type: object
      properties:
        guid:
          type: string
        document_guid:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      description: "Schema for a single document reference GET, BCF REST API."
    document_reference_POST:
      type: object
      properties:
        guid:
          type: string
          nullable: true
        document_guid:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    document_reference_PUT:
      required:
      - guid
      type: object
      properties:
        document_guid:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    comment_event_GET:
      required:
      - author
      - comment_guid
      - date
      - topic_guid
      type: object
      properties:
        comment_guid:
          type: string
        topic_guid:
          type: string
        date:
          type: string
        author:
          type: string
        actions:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/event_action'
    topic_event_GET:
      required:
      - author
      - date
      - topic_guid
      type: object
      properties:
        topic_guid:
          type: string
        date:
          type: string
        author:
          type: string
        actions:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/event_action'
    file_GET:
      type: object
      properties:
        ifc_project:
          type: string
          nullable: true
        ifc_spatial_structure_element:
          type: string
          nullable: true
        filename:
          type: string
          nullable: true
        date:
          type: string
          nullable: true
        reference:
          type: string
          nullable: true
      description: "Schema for a single file GET, BCF REST API."
    file_PUT:
      type: object
      properties:
        ifc_project:
          type: string
          nullable: true
        ifc_spatial_structure_element:
          type: string
          nullable: true
        filename:
          type: string
          nullable: true
        date:
          type: string
          nullable: true
        reference:
          type: string
          nullable: true
    project_file_display_information:
      required:
      - field_display_name
      - field_value
      type: object
      properties:
        field_display_name:
          type: string
        field_value:
          type: string
      description: "Schema for the display information of a project file, BCF REST API."
    project_file_information:
      type: object
      properties:
        display_information:
          type: array
          items:
            $ref: '#/components/schemas/project_file_display_information'
        file:
          $ref: '#/components/schemas/file_GET'
      description: "Schema for a single project file information, BCF REST API."
    project_files_information_GET:
      type: array
      description: Schema for the listing the response of the GET project files information service
      items:
        $ref: '#/components/schemas/project_file_information'
    related_topic_GET:
      required:
      - related_topic_guid
      type: object
      properties:
        related_topic_guid:
          type: string
      description: "Schema for single related topic GET, BCF REST API."
    related_topic_PUT:
      required:
      - related_topic_guid
      type: object
      properties:
        related_topic_guid:
          type: string
      description: "Schema for related topic PUT, BCF REST API."
    bim_snippet:
      required:
      - is_external
      - reference
      - reference_schema
      - snippet_type
      type: object
      properties:
        snippet_type:
          type: string
        is_external:
          type: string
        reference:
          type: string
        reference_schema:
          type: string
      nullable: true
    topic_GET:
      required:
      - creation_author
      - creation_date
      - guid
      - server_assigned_id
      - title
      type: object
      properties:
        guid:
          type: string
        server_assigend_id:
          type: string
        topic_type:
          type: string
          nullable: true
        topic_status:
          type: string
          nullable: true
        reference_links:
          type: array
          nullable: true
          items:
            type: string
        title:
          type: string
        priority:
          type: string
          nullable: true
        index:
          type: integer
          nullable: true
        labels:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        creation_date:
          type: string
        creation_author:
          type: string
        modified_date:
          type: string
        modified_author:
          type: string
          nullable: true
        assigned_to:
          type: string
          nullable: true
        stage:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        bim_snippet:
          $ref: '#/components/schemas/bim_snippet'
        due_date:
          type: string
          nullable: true
        authorization:
          $ref: '#/components/schemas/topic_GET_authorization'
    topic_POST:
      required:
      - title
      type: object
      properties:
        guid:
          type: string
          nullable: true
        topic_type:
          type: string
          nullable: true
        topic_status:
          type: string
          nullable: true
        reference_links:
          type: array
          nullable: true
          items:
            type: string
        title:
          type: string
        priority:
          type: string
          nullable: true
        index:
          type: integer
          nullable: true
        labels:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        assigned_to:
          type: string
          nullable: true
        stage:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        bim_snippet:
          $ref: '#/components/schemas/bim_snippet'
        due_date:
          type: string
          nullable: true
    topic_PUT:
      required:
      - title
      type: object
      properties:
        topic_type:
          type: string
          nullable: true
        topic_status:
          type: string
          nullable: true
        reference_links:
          type: array
          nullable: true
          items:
            type: string
        title:
          type: string
        priority:
          type: string
          nullable: true
        index:
          type: integer
          nullable: true
        labels:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        assigned_to:
          type: string
          nullable: true
        stage:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        bim_snippet:
          $ref: '#/components/schemas/bim_snippet'
        due_date:
          type: string
          nullable: true
    bitmap_GET:
      type: object
      properties:
        guid:
          type: string
        bitmap_type:
          type: string
          enum:
          - jpg
          - png
        location:
          $ref: '#/components/schemas/location'
        normal:
          $ref: '#/components/schemas/direction'
        up:
          $ref: '#/components/schemas/direction'
        height:
          type: number
    bitmap_POST:
      type: object
      properties:
        bitmap_type:
          type: string
          enum:
          - jpg
          - png
        bitmap_data:
          type: string
          format: base64
        location:
          $ref: '#/components/schemas/location'
        normal:
          $ref: '#/components/schemas/direction'
        up:
          $ref: '#/components/schemas/direction'
        height:
          type: number
    clipping_plane:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/location'
        direction:
          $ref: '#/components/schemas/direction'
      nullable: true
    coloring:
      type: object
      properties:
        color:
          type: string
        components:
          $ref: '#/components/schemas/component_list'
    coloring_GET:
      type: object
      properties:
        coloring:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/coloring'
      description: "Schema for coloring GET, BCF REST API."
    component:
      type: object
      properties:
        ifc_guid:
          type: string
          nullable: true
        originating_system:
          type: string
          nullable: true
        authoring_tool_id:
          type: string
          nullable: true
    component_list:
      type: array
      nullable: true
      items:
        $ref: '#/components/schemas/component'
    components:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/component_list'
        coloring:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/coloring'
        visibility:
          $ref: '#/components/schemas/visibility'
      nullable: true
    direction:
      type: object
      properties:
        x:
          type: number
        "y":
          type: number
        z:
          type: number
    line:
      type: object
      properties:
        start_point:
          $ref: '#/components/schemas/point'
        end_point:
          $ref: '#/components/schemas/point'
      nullable: true
    location:
      type: object
      properties:
        x:
          type: number
        "y":
          type: number
        z:
          type: number
      nullable: true
    orthogonal_camera:
      type: object
      properties:
        camera_view_point:
          $ref: '#/components/schemas/point'
        camera_direction:
          $ref: '#/components/schemas/direction'
        camera_up_vector:
          $ref: '#/components/schemas/direction'
        view_to_world_scale:
          type: number
        aspect_ratio:
          type: number
      nullable: true
    perspective_camera:
      type: object
      properties:
        camera_view_point:
          $ref: '#/components/schemas/point'
        camera_direction:
          $ref: '#/components/schemas/direction'
        camera_up_vector:
          $ref: '#/components/schemas/direction'
        field_of_view:
          type: number
        aspect_ratio:
          type: number
      nullable: true
    point:
      type: object
      properties:
        x:
          type: number
        "y":
          type: number
        z:
          type: number
    selection_GET:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/component_list'
      description: "Schema for selection GET, BCF REST API."
    snapshot_GET:
      type: object
      properties:
        snapshot_type:
          type: string
          enum:
          - jpg
          - png
      nullable: true
    snapshot_POST:
      type: object
      properties:
        snapshot_type:
          type: string
          enum:
          - jpg
          - png
        snapshot_data:
          type: string
          format: base64
      nullable: true
    view_setup_hints:
      type: object
      properties:
        spaces_visible:
          type: boolean
          default: false
        space_boundaries_visible:
          type: boolean
          default: false
        openings_visible:
          type: boolean
          default: false
      nullable: true
    viewpoint_GET:
      required:
      - guid
      type: object
      properties:
        index:
          type: integer
          nullable: true
        guid:
          type: string
        orthogonal_camera:
          $ref: '#/components/schemas/orthogonal_camera'
        perspective_camera:
          $ref: '#/components/schemas/perspective_camera'
        lines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/line'
        clipping_planes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/clipping_plane'
        bitmaps:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/bitmap_GET'
        snapshot:
          $ref: '#/components/schemas/snapshot_GET'
        authorization:
          $ref: '#/components/schemas/viewpoint_GET_authorization'
    viewpoint_POST:
      type: object
      properties:
        guid:
          type: string
          nullable: true
        index:
          type: integer
          nullable: true
        orthogonal_camera:
          $ref: '#/components/schemas/orthogonal_camera'
        perspective_camera:
          $ref: '#/components/schemas/perspective_camera'
        lines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/line'
        clipping_planes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/clipping_plane'
        bitmaps:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/bitmap_POST'
        snapshot:
          $ref: '#/components/schemas/snapshot_POST'
        components:
          $ref: '#/components/schemas/components'
    visibility:
      type: object
      properties:
        default_visibility:
          type: boolean
          default: false
        exceptions:
          $ref: '#/components/schemas/component_list'
        view_setup_hints:
          $ref: '#/components/schemas/view_setup_hints'
    visibility_GET:
      type: object
      properties:
        visibility:
          $ref: '#/components/schemas/visibility'
    project_GET_authorization:
      type: object
      properties:
        project_actions:
          $ref: '#/components/schemas/project_actions'
    comment_GET_authorization:
      type: object
      properties:
        comment_actions:
          $ref: '#/components/schemas/comment_actions'
    topic_GET_authorization:
      type: object
      properties:
        topic_actions:
          $ref: '#/components/schemas/topic_actions'
        topic_status:
          type: array
          nullable: true
          items:
            type: string
    viewpoint_GET_authorization:
      type: object
      properties:
        viewpoint_actions:
          $ref: '#/components/schemas/viewpoint_actions'
  parameters:
    version:
      name: version
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
        default: "3.0"
    project_id:
      name: project_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    topic_id:
      name: topic_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    comment_id:
      name: comment_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    viewpoint_id:
      name: viewpoint_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    document_reference_id:
      name: document_reference_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    bitmap_id:
      name: bitmap_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    document_id:
      name: document_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    top:
      name: $top
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
    skip:
      name: $skip
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
